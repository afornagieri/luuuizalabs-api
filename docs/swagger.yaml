openapi: 3.0.3
info:
  title: Customers API
  description: API to manage customers and their favorite products
  version: 1.0.0

servers:
  - url: http://localhost:3000/api

paths:
  /auth/login:
    post:
      summary: Authenticate user and generate token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request (missing required parameters or invalid request body)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (invalid username or password)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (unexpected error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers:
    get:
      summary: Retrieve all customers
      tags:
        - Customers
      security:
        - TokenAuth: []
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '500':
          description: Internal server error (unable to fetch customers)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new customer
      tags:
        - Customers
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad request (missing required fields or invalid input data)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (unable to create customer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers/{id}:
    put:
      summary: Update an existing customer
      tags:
        - Customers
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Customer successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad request (invalid data provided or malformed request)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Customer not found (no customer found with the provided ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (unable to update customer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a customer
      tags:
        - Customers
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Customer successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer deleted successfully
        '404':
          description: Customer not found (no customer found with the provided ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (unable to delete customer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@example.com
        favorite_products:
          type: array
          items:
            $ref: '#/components/schemas/Product'

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 101
        title:
          type: string
          example: "Awesome Product"
        price:
          type: number
          format: float
          example: 49.99
        description:
          type: string
          example: "A very nice product."
        category:
          type: string
          example: "electronics"
        image:
          type: string
          example: "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg"

    CreateCustomerRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@example.com
        favorite_products:
          type: array
          items:
            type: integer
          example: [1, 2, 3]

    UpdateCustomerRequest:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@example.com
        favorite_products:
          type: array
          items:
            type: integer
          example: [1, 2, 3]

    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: "password123"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "An error occurred"

  securitySchemes:
    TokenAuth:
      type: apiKey
      in: header
      name: Authorization

  responses:
    BadRequest:
      description: Bad request (missing required parameters or invalid request body)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized (invalid username or password)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found (no customer found with the provided ID)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error (unexpected error)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
